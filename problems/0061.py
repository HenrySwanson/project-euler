"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle      P_3,n = n(n+1)/2       1, 3, 6, 10, 15, ...
Square        P_4,n = n^2            1, 4, 9, 16, 25, ...
Pentagonal    P_5,n = n(3n−1)/2      1, 5, 12, 22, 35, ...
Hexagonal     P_6,n = n(2n−1)        1, 6, 15, 28, 45, ...
Heptagonal    P_7,n = n(5n−3)/2      1, 7, 18, 34, 55, ...
Octagonal     P_8,n = n(3n−2)        1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
2. Each polygonal type: triangle (P_3,127=8128), square (P_4,91=8281), and pentagonal (P_5,44=2882), is represented by a different number in the set.
3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
"""


from typing import Iterator, List
from lib.sequence import (
    heptagonal,
    hexagonal,
    increasing_seq_cutoff,
    octagonal,
    pentagonal,
    square,
    triangle,
)


def solve_problem() -> int:
    # Pre-generate the list of possible numbers
    triangles = increasing_seq_cutoff(triangle, 1000, 10000)
    squares = increasing_seq_cutoff(square, 1000, 10000)
    pentagonals = increasing_seq_cutoff(pentagonal, 1000, 10000)
    hexagonals = increasing_seq_cutoff(hexagonal, 1000, 10000)
    heptagonals = increasing_seq_cutoff(heptagonal, 1000, 10000)
    octagonals = increasing_seq_cutoff(octagonal, 1000, 10000)

    # Let's start with octagonal and work our way down
    pools = [heptagonals, hexagonals, pentagonals, squares, triangles]
    for n in octagonals:
        for tail in go(pools, n):
            # check that the sequence loops around
            if not are_compatible(tail[-1], n):
                continue

            seq = [n] + tail
            return sum(seq)

    raise Exception("No solution found!")


def go(pools: List[List[int]], prev_elt: int) -> Iterator[List[int]]:
    if not pools:
        yield []
        return

    for pool in pools:
        for n in pool:
            # See if it matches the previous element in the sequence
            if not are_compatible(prev_elt, n):
                continue

            # If so, nice! Let's recurse, omitting the pool we're currently using
            remaining_pools = [p for p in pools if p != pool]

            for tail in go(remaining_pools, n):
                yield [n] + tail


def are_compatible(a: int, b: int) -> bool:
    return a % 100 == b // 100
